// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pos.Persistence;

#nullable disable

namespace Pos.Persistence.Migrations
{
    [DbContext(typeof(PosClientDbContext))]
    [Migration("20251029231840_InitialCreate5")]
    partial class InitialCreate5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("InvoiceSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLine1")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("AskToPrintOnSave")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("EnableDrawerKick")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LogoAlignment")
                        .HasColumnType("TEXT");

                    b.Property<int>("LogoMaxWidthPx")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("LogoPng")
                        .HasColumnType("BLOB");

                    b.Property<string>("OutletDisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int?>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaperWidthMm")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PrintBarcodeOnReceipt")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PrintOnSave")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrinterName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShowCashierOnReceipt")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowCustomerOnReceipt")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowQr")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OutletId");

                    b.ToTable("InvoiceSettings", (string)null);
                });

            modelBuilder.Entity("Pos.Domain.Entities.BarcodeLabelSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodeType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Columns")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Dpi")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FontSizePt")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HorizontalGapMm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LabelHeightMm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LabelWidthMm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarginLeftMm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MarginTopMm")
                        .HasColumnType("INTEGER");

                    b.Property<double>("NameXmm")
                        .HasColumnType("REAL");

                    b.Property<double>("NameYmm")
                        .HasColumnType("REAL");

                    b.Property<int?>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PriceXmm")
                        .HasColumnType("REAL");

                    b.Property<double>("PriceYmm")
                        .HasColumnType("REAL");

                    b.Property<string>("PrinterName")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("Rows")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowName")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowPrice")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowSku")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SkuXmm")
                        .HasColumnType("REAL");

                    b.Property<double>("SkuYmm")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("VerticalGapMm")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OutletId");

                    b.ToTable("BarcodeLabelSettings", (string)null);
                });

            modelBuilder.Entity("Pos.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Pos.Domain.Entities.CashLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CounterId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Delta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RefId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RefType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<int?>("TillSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TsUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OutletId", "TsUtc");

                    b.ToTable("CashLedgers");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Counter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OutletId");

                    b.ToTable("Counters");
                });

            modelBuilder.Entity("Pos.Domain.Entities.CounterBinding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CounterId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastSeenUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<int>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CounterId")
                        .IsUnique();

                    b.HasIndex("MachineId")
                        .IsUnique();

                    b.HasIndex("OutletId");

                    b.ToTable("CounterBindings", (string)null);
                });

            modelBuilder.Entity("Pos.Domain.Entities.CounterSequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CounterId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("NextInvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CounterId")
                        .IsUnique();

                    b.ToTable("CounterSequences");
                });

            modelBuilder.Entity("Pos.Domain.Entities.InvoiceLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Footer")
                        .HasColumnType("TEXT");

                    b.Property<string>("Header")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvoiceSettingsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<string>("SaleReturnNote")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceSettingsId", "Lang")
                        .IsUnique();

                    b.ToTable("InvoiceLocalizations", (string)null);
                });

            modelBuilder.Entity("Pos.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DefaultDiscountAmt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DefaultDiscountPct")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DefaultTaxRatePct")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaxCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TaxInclusive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Variant1Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Variant1Value")
                        .HasColumnType("TEXT");

                    b.Property<string>("Variant2Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Variant2Value")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VoidedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Sku")
                        .IsUnique()
                        .HasFilter("length(trim(Sku)) > 0");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Pos.Domain.Entities.ItemBarcode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantityPerScan")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Symbology")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ItemId")
                        .IsUnique()
                        .HasFilter("IsPrimary = 1");

                    b.ToTable("ItemBarcodes");
                });

            modelBuilder.Entity("Pos.Domain.Entities.OpeningStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LockedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LockedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PostedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PostedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TsUtc")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoidReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VoidedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VoidedByUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OpeningStocks");
                });

            modelBuilder.Entity("Pos.Domain.Entities.OpeningStockDraftLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Qty")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("StockDocId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("StockDocId");

                    b.ToTable("OpeningStockDraftLines");
                });

            modelBuilder.Entity("Pos.Domain.Entities.OpeningStockLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int>("OpeningStockId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Qty")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OpeningStockId");

                    b.ToTable("OpeningStockLines");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Outlet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Outlets");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Party", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSharedAcrossOutlets")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IsActive", "Name");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Pos.Domain.Entities.PartyBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AsOfUtc")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartyId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PartyId", "OutletId")
                        .IsUnique();

                    b.ToTable("PartyBalances");
                });

            modelBuilder.Entity("Pos.Domain.Entities.PartyLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Credit")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Debit")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("DocId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartyId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OutletId");

                    b.HasIndex("PartyId", "OutletId", "TimestampUtc");

                    b.ToTable("PartyLedgers");
                });

            modelBuilder.Entity("Pos.Domain.Entities.PartyOutlet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowCredit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("CreditLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValue(true);

                    b.Property<int>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartyId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OutletId");

                    b.HasIndex("PartyId", "OutletId")
                        .IsUnique();

                    b.ToTable("PartyOutlets", null, t =>
                        {
                            t.HasCheckConstraint("CK_PartyOutlet_CreditLimit_NonNegative", "[CreditLimit] IS NULL OR [CreditLimit] >= 0");
                        });
                });

            modelBuilder.Entity("Pos.Domain.Entities.PartyRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("PartyId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PartyId", "Role")
                        .IsUnique();

                    b.ToTable("PartyRoles");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CashPaid")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CreditDue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DocNo")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("OtherCharges")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OutletId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PartyId1")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceivedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RefPurchaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RevisedFromPurchaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RevisedToPurchaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Revision")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TargetType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("VendorInvoiceNo")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WarehouseId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DocNo");

                    b.HasIndex("OutletId");

                    b.HasIndex("OutletId1");

                    b.HasIndex("PartyId");

                    b.HasIndex("PartyId1");

                    b.HasIndex("RefPurchaseId");

                    b.HasIndex("RevisedFromPurchaseId");

                    b.HasIndex("RevisedToPurchaseId");

                    b.HasIndex("Status");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("WarehouseId1");

                    b.ToTable("Purchases", t =>
                        {
                            t.HasCheckConstraint("CK_Purchase_Target", "( [TargetType] = 1 AND [OutletId] IS NOT NULL AND [WarehouseId] IS NULL ) OR ( [TargetType] = 2 AND [WarehouseId] IS NOT NULL AND [OutletId] IS NULL )");
                        });
                });

            modelBuilder.Entity("Pos.Domain.Entities.PurchaseLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ItemId1")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PurchaseId1")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Qty")
                        .HasColumnType("decimal(18,3)");

                    b.Property<int?>("RefPurchaseLineId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemId1");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("PurchaseId1");

                    b.HasIndex("RefPurchaseLineId");

                    b.ToTable("PurchaseLines");
                });

            modelBuilder.Entity("Pos.Domain.Entities.PurchasePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Method")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TsUtc")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("OutletId", "TsUtc");

                    b.ToTable("PurchasePayments");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CardAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CashAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CashierId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CounterId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerKind")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerPhone")
                        .HasColumnType("TEXT");

                    b.Property<bool>("DiscountBeforeTax")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EReceiptToken")
                        .HasColumnType("TEXT");

                    b.Property<string>("EReceiptUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("HoldTag")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("InvoiceDiscountAmt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InvoiceDiscountPct")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InvoiceDiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceFooter")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReturn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OriginalSaleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RefSaleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RevisedFromSaleId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RevisedToSaleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Revision")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<int?>("SalesmanId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TillSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoidReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VoidedAtUtc")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CashierId");

                    b.HasIndex("IsReturn");

                    b.HasIndex("RefSaleId");

                    b.HasIndex("SalesmanId");

                    b.HasIndex("Status");

                    b.HasIndex("CounterId", "InvoiceNumber");

                    b.HasIndex("CounterId", "InvoiceNumber", "Revision")
                        .IsUnique();

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Pos.Domain.Entities.SaleLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountAmt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DiscountPct")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("LineNet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LineTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Qty")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<int>("SaleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaxCode")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TaxInclusive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TaxRatePct")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitNet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SaleLines");
                });

            modelBuilder.Entity("Pos.Domain.Entities.StockDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AutoReceiveOnDispatch")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DocType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EffectiveDateUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LockedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LockedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PostedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PostedByUserId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReceivedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ToLocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ToLocationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TransferNo")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TransferStatus")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoidReason")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VoidedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VoidedByUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TransferNo")
                        .IsUnique();

                    b.ToTable("StockDocs");
                });

            modelBuilder.Entity("Pos.Domain.Entities.StockDocLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ItemNameSnapshot")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("QtyExpected")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("QtyReceived")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<string>("SkuSnapshot")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int>("StockDocId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("UnitCostExpected")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("VarianceNote")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StockDocId");

                    b.HasIndex("ItemId", "StockDocId");

                    b.ToTable("StockDocLines");
                });

            modelBuilder.Entity("Pos.Domain.Entities.StockEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LocationType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<int>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("QtyChange")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("RefId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RefType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<int?>("StockDocId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Ts")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StockDocId");

                    b.HasIndex("Ts")
                        .HasDatabaseName("IX_StockEntries_Ts");

                    b.HasIndex("RefType", "RefId")
                        .HasDatabaseName("IX_StockEntries_Ref");

                    b.HasIndex("ItemId", "LocationType", "LocationId")
                        .HasDatabaseName("IX_StockEntries_Item_Loc");

                    b.ToTable("StockEntries", t =>
                        {
                            t.HasCheckConstraint("CK_StockEntry_StockDoc_Requirement", "CASE  WHEN [RefType] IN ('Opening','TransferOut','TransferIn') THEN [StockDocId] IS NOT NULL  ELSE 1 END");
                        });
                });

            modelBuilder.Entity("Pos.Domain.Entities.SupplierCredit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SupplierCredits");
                });

            modelBuilder.Entity("Pos.Domain.Entities.TillSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CloseTs")
                        .HasColumnType("TEXT");

                    b.Property<int>("CounterId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DeclaredCash")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OpenTs")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OpeningFloat")
                        .HasColumnType("TEXT");

                    b.Property<int>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("OverShort")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TillSessions");
                });

            modelBuilder.Entity("Pos.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGlobalAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Pos.Domain.Entities.UserOutlet", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OutletId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "OutletId");

                    b.HasIndex("OutletId");

                    b.ToTable("UserOutlets");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLine")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("IsActive", "Name");

                    b.ToTable("Warehouses", (string)null);
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("BLOB")
                        .HasDefaultValueSql("X''");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("VoidedAtUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoidedBy")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("InvoiceSettings", b =>
                {
                    b.HasOne("Pos.Domain.Entities.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId");

                    b.Navigation("Outlet");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Counter", b =>
                {
                    b.HasOne("Pos.Domain.Entities.Outlet", "Outlet")
                        .WithMany("Counters")
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outlet");
                });

            modelBuilder.Entity("Pos.Domain.Entities.CounterBinding", b =>
                {
                    b.HasOne("Pos.Domain.Entities.Counter", "Counter")
                        .WithMany("CounterBindings")
                        .HasForeignKey("CounterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pos.Domain.Entities.Outlet", "Outlet")
                        .WithMany("CounterBindings")
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Counter");

                    b.Navigation("Outlet");
                });

            modelBuilder.Entity("Pos.Domain.Entities.InvoiceLocalization", b =>
                {
                    b.HasOne("InvoiceSettings", "InvoiceSettings")
                        .WithMany("Localizations")
                        .HasForeignKey("InvoiceSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InvoiceSettings");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Item", b =>
                {
                    b.HasOne("Pos.Domain.Entities.Brand", "Brand")
                        .WithMany("Items")
                        .HasForeignKey("BrandId");

                    b.HasOne("Pos.Domain.Entities.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Pos.Domain.Entities.ItemBarcode", b =>
                {
                    b.HasOne("Pos.Domain.Entities.Item", "Item")
                        .WithMany("Barcodes")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Pos.Domain.Entities.OpeningStockLine", b =>
                {
                    b.HasOne("Pos.Domain.Entities.OpeningStock", "OpeningStock")
                        .WithMany("Lines")
                        .HasForeignKey("OpeningStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpeningStock");
                });

            modelBuilder.Entity("Pos.Domain.Entities.PartyLedger", b =>
                {
                    b.HasOne("Pos.Domain.Entities.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pos.Domain.Entities.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Outlet");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pos.Domain.Entities.PartyOutlet", b =>
                {
                    b.HasOne("Pos.Domain.Entities.Outlet", "Outlet")
                        .WithMany("PartyOutlets")
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pos.Domain.Entities.Party", "Party")
                        .WithMany("Outlets")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outlet");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pos.Domain.Entities.PartyRole", b =>
                {
                    b.HasOne("Pos.Domain.Entities.Party", "Party")
                        .WithMany("Roles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("Pos.Domain.Entities.Outlet", null)
                        .WithMany()
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pos.Domain.Entities.Outlet", "Outlet")
                        .WithMany()
                        .HasForeignKey("OutletId1");

                    b.HasOne("Pos.Domain.Entities.Party", null)
                        .WithMany()
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pos.Domain.Entities.Party", "Party")
                        .WithMany()
                        .HasForeignKey("PartyId1");

                    b.HasOne("Pos.Domain.Entities.Purchase", "RefPurchase")
                        .WithMany()
                        .HasForeignKey("RefPurchaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pos.Domain.Entities.Purchase", null)
                        .WithMany()
                        .HasForeignKey("RevisedFromPurchaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pos.Domain.Entities.Purchase", null)
                        .WithMany()
                        .HasForeignKey("RevisedToPurchaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pos.Domain.Entities.Warehouse", null)
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Pos.Domain.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId1");

                    b.Navigation("Outlet");

                    b.Navigation("Party");

                    b.Navigation("RefPurchase");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Pos.Domain.Entities.PurchaseLine", b =>
                {
                    b.HasOne("Pos.Domain.Entities.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pos.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId1");

                    b.HasOne("Pos.Domain.Entities.Purchase", null)
                        .WithMany("Lines")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pos.Domain.Entities.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId1");

                    b.HasOne("Pos.Domain.Entities.PurchaseLine", null)
                        .WithMany()
                        .HasForeignKey("RefPurchaseLineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Item");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Pos.Domain.Entities.PurchasePayment", b =>
                {
                    b.HasOne("Pos.Domain.Entities.Purchase", "Purchase")
                        .WithMany("Payments")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Sale", b =>
                {
                    b.HasOne("Pos.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CashierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pos.Domain.Entities.Sale", "RefSale")
                        .WithMany()
                        .HasForeignKey("RefSaleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Pos.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("SalesmanId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("RefSale");
                });

            modelBuilder.Entity("Pos.Domain.Entities.StockDocLine", b =>
                {
                    b.HasOne("Pos.Domain.Entities.StockDoc", null)
                        .WithMany("TransferLines")
                        .HasForeignKey("StockDocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pos.Domain.Entities.StockEntry", b =>
                {
                    b.HasOne("Pos.Domain.Entities.StockDoc", "StockDoc")
                        .WithMany("Lines")
                        .HasForeignKey("StockDocId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("StockDoc");
                });

            modelBuilder.Entity("Pos.Domain.Entities.UserOutlet", b =>
                {
                    b.HasOne("Pos.Domain.Entities.Outlet", "Outlet")
                        .WithMany("UserOutlets")
                        .HasForeignKey("OutletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pos.Domain.Entities.User", "User")
                        .WithMany("UserOutlets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Outlet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("Pos.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId");

                    b.HasOne("Pos.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("InvoiceSettings", b =>
                {
                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Category", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Counter", b =>
                {
                    b.Navigation("CounterBindings");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Item", b =>
                {
                    b.Navigation("Barcodes");
                });

            modelBuilder.Entity("Pos.Domain.Entities.OpeningStock", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Outlet", b =>
                {
                    b.Navigation("CounterBindings");

                    b.Navigation("Counters");

                    b.Navigation("PartyOutlets");

                    b.Navigation("UserOutlets");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Party", b =>
                {
                    b.Navigation("Outlets");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Pos.Domain.Entities.Purchase", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Pos.Domain.Entities.StockDoc", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("TransferLines");
                });

            modelBuilder.Entity("Pos.Domain.Entities.User", b =>
                {
                    b.Navigation("UserOutlets");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("Variants");
                });
#pragma warning restore 612, 618
        }
    }
}
