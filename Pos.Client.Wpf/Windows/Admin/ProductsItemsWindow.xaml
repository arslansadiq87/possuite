<Window x:Class="Pos.Client.Wpf.Windows.Admin.ProductsItemsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:domain="clr-namespace:Pos.Domain.Entities;assembly=Pos.Domain"
        Title="Products  &amp; Items" Height="720" Width="1080"
        WindowStartupLocation="CenterOwner">
    

    <Grid Margin="12">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <!-- Top bar -->
            <RowDefinition Height="*"/>
            <!-- Body -->
            <RowDefinition Height="Auto"/>
            <!-- Footer -->
        </Grid.RowDefinitions>
        
        

        <!-- Top bar: shared search + filter + actions -->
        <DockPanel Grid.Row="0" Margin="0,0,0,8">
            <!-- Docked toolbar at the top -->
            <ToolBar DockPanel.Dock="Top" Margin="8,0,0,8"
           Style="{StaticResource ModernToolBar.Compact}"
           ToolBarTray.IsLocked="True">
                <Button Content="Brands" Click="Brands_Click" ToolBar.OverflowMode="Never" Margin="6,0,0,0"/>
                <Button Content="Categories" Click="Categories_Click" ToolBar.OverflowMode="Never" Margin="6,0,0,0"/>
                <Button Content="Close" IsCancel="True" HorizontalAlignment="Right"></Button>
            </ToolBar>

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <!-- Search: -->
                    <ColumnDefinition Width="280"/>
                    <!-- TextBox -->
                    <ColumnDefinition Width="Auto"/>
                    <!-- Find -->
                    <ColumnDefinition Width="Auto"/>
                    <!-- Refresh -->
                    <ColumnDefinition Width="*"/>
                    <!-- spacer -->
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <!-- Brands -->
                </Grid.ColumnDefinitions>

                <TextBlock Grid.Column="0" Text="Search:" VerticalAlignment="Center" Margin="0,0,6,0" Style="{StaticResource ModernTextBlock}"/>
                <TextBox   Grid.Column="1" x:Name="SearchBox" Height="28" VerticalContentAlignment="Center"
                   ToolTip="Product name, brand, SKU, or item barcode/name" Style="{StaticResource Txt.Search}"/>
                <Button    Grid.Column="2" Content="Find"     Width="80" Margin="8,0,0,0" Click="Find_Click" Style="{StaticResource Btn.GlobalPrimary}"/>
                <Button    Grid.Column="3" Content="Refresh"  Width="90" Margin="8,0,0,0" Click="Refresh_Click" Style="{StaticResource Btn.GlobalPrimary}"/>
                <!-- column 4 is the stretch spacer -->
                
            </Grid>
        </DockPanel>


        <!-- Body: Left tabs (Products / Standalone Items) and Right editable grid -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="420"/>
                <ColumnDefinition Width="8"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- LEFT: Tabs -->
            <TabControl x:Name="LeftTabs" Grid.Column="0" SelectionChanged="LeftTabs_SelectionChanged" Style="{StaticResource ModernTabControl}">
                <!-- PRODUCTS TAB -->
                <TabItem Header="Products" Style="{StaticResource ModernTabItem}">
                    <DockPanel>
                        <ToolBar DockPanel.Dock="Top"
                             Style="{StaticResource ModernToolBar.Compact}"
                             ToolBarTray.IsLocked="True">

                            <!-- Always visible -->
                            <Button Content="New Product" ToolBar.OverflowMode="Never" Click="NewProduct_Click" Width="100"/>
                            <Separator ToolBar.OverflowMode="Never" Visibility="{Binding Visibility, Source={x:Reference BtnEditProduct}}"/>
                            <!-- Edit currently selected product -->
                            <Button x:Name="BtnEditProduct" Content="Edit" ToolBar.OverflowMode="Never" Margin="6,0,0,0" Click="EditProduct_Click"  Width="100">
                                <Button.Style>
                                    <Style TargetType="Button">
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Cursor" Value="Hand"/>
                                            </Trigger>
                                            <DataTrigger Binding="{Binding SelectedItem, ElementName=ProductsList}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                            <!-- Visible only when a product is selected -->
                            <!-- Single action: Delete or Void (ask) -->
                            <Separator ToolBar.OverflowMode="Never" Visibility="{Binding Visibility, Source={x:Reference BtnDeleteOrVoidProduct}}"/>
                            <Button x:Name="BtnDeleteOrVoidProduct" Content="Delete/Void" ToolBar.OverflowMode="Never" Click="DeleteOrVoidProduct_Click"  Width="100">
                                <Button.Style>
                                    <Style TargetType="Button">
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Cursor" Value="Hand"/>
                                            </Trigger>
                                            <DataTrigger Binding="{Binding SelectedItem, ElementName=ProductsList}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                        </ToolBar>

                                           

                            
                      

                        <ListBox x:Name="ProductsList"
         Style="{StaticResource ModernListBox}"
         SelectionMode="Single"
         SelectionChanged="ProductsList_SelectionChanged">
                            <!-- Make the entire row clickable & selectable -->
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem" BasedOn="{StaticResource ModernListBoxItem}">
                                    <Setter Property="IsEnabled" Value="True"/>
                                    <Setter Property="IsHitTestVisible" Value="True"/>
                                    <Setter Property="Focusable" Value="True"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                    <Setter Property="Background" Value="Transparent"/>
                                </Style>
                            </ListBox.ItemContainerStyle>

                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid Margin="4,2">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>

                                        <!-- Product name -->
                                        <TextBlock Grid.Column="0"
                   Text="{Binding Name}"
                   FontWeight="SemiBold"
                   TextTrimming="CharacterEllipsis"
                   VerticalAlignment="Center"/>

                                        <!-- Brand & Category chips (auto-hide when missing) -->
                                        <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center">
                                            <!-- Brand chip -->
                                            <Border x:Name="BrandChip"
                                                  Padding="8,2" CornerRadius="12" Margin="6,0,0,0"
                                                  Background="{DynamicResource Chip.Background}"
                                                  BorderBrush="{DynamicResource Chip.Border}" BorderThickness="1">
                                                  <TextBlock Text="{Binding Brand.Name}"
                                                      Foreground="{DynamicResource Chip.Foreground}"
                                                      FontSize="12"/>
                                                <Border.Style>
                                                    <Style TargetType="Border">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Brand.Name}" Value="{x:Null}">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding Brand.Name}" Value="">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Border.Style>
                                            </Border>

                                            <!-- Category chip -->
                                            <Border x:Name="CategoryChip"
                                                Padding="8,2" CornerRadius="12" Margin="6,0,0,0"
                                                Background="{DynamicResource Chip.Background}"
                                                BorderBrush="{DynamicResource Chip.Border}" BorderThickness="1">
                                               <TextBlock Text="{Binding Category.Name}"
                                                   Foreground="{DynamicResource Chip.Foreground}"
                                                   FontSize="12"/>
                                                <Border.Style>
                                                    <Style TargetType="Border">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding Category.Name}" Value="{x:Null}">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding Category.Name}" Value="">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Border.Style>
                                            </Border>
                                        </StackPanel>
                                    </Grid>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </DockPanel>
                </TabItem>

                <!-- STANDALONE ITEMS TAB -->
                <TabItem Header="Standalone Items" Style="{StaticResource ModernTabItem}">
                    <DockPanel>
                        <ToolBar DockPanel.Dock="Top" Style="{StaticResource ModernToolBar.Compact}"
                              ToolBarTray.IsLocked="True">
                            <Button Content="New Item" Click="NewStandaloneItem_Click" ToolBar.OverflowMode="Never" Width="100"/>
                            <!-- Edit Item (visible only when a standalone item is selected) -->


                            <!-- Separator mirrors the Edit button's visibility -->
                            <Separator ToolBar.OverflowMode="Never" Visibility="{Binding Visibility, Source={x:Reference BtnEditStandalone}}"/>
                            
                            <Button x:Name="BtnEditStandalone" Content="Edit" Click="EditStandaloneItem_Click" Width="100">
                                <Button.Style>
                                    <Style TargetType="Button">
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Cursor" Value="Hand"/>
                                            </Trigger>
                                            <DataTrigger Binding="{Binding ElementName=StandaloneList, Path=SelectedItem}"
                                                Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                            <!-- Standalone mode only -->
                            <Separator ToolBar.OverflowMode="Never" Visibility="{Binding Visibility, Source={x:Reference BtnDeleteVoidItem}}"/>
                            <Button x:Name="BtnDeleteVoidItem" Content="Delete/Void" Click="DeleteOrVoidVariant_Click" Width="100">
                                <Button.Style>
                                    <Style TargetType="Button">
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Style.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Cursor" Value="Hand"/>
                                            </Trigger>
                                            <DataTrigger Binding="{Binding ElementName=StandaloneList, Path=SelectedItem}"
                                                Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Button.Style>
                            </Button>
                            

                        </ToolBar>

                        <ListBox x:Name="StandaloneList"
         Style="{StaticResource ModernListBox}"
         SelectionMode="Single"
         SelectionChanged="StandaloneList_SelectionChanged">

                            <!-- Same container behavior as Products -->
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem" BasedOn="{StaticResource ModernListBoxItem}">
                                    <Setter Property="IsEnabled" Value="True"/>
                                    <Setter Property="IsHitTestVisible" Value="True"/>
                                    <Setter Property="Focusable" Value="True"/>
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                    <Setter Property="Background" Value="Transparent"/>
                                </Style>
                            </ListBox.ItemContainerStyle>

                            <!-- Same row layout: name on left, chips on right -->
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid Margin="4,2">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <!-- Item name -->
                                        <TextBlock Grid.Column="0"
                   Text="{Binding Name}"
                   FontWeight="SemiBold"
                   TextTrimming="CharacterEllipsis"
                   VerticalAlignment="Center"/>

                                        <!-- Brand / Category chips -->
                                        <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center">
                                            <!-- Brand chip -->
                                            <Border Padding="8,2" CornerRadius="12" Margin="6,0,0,0"
                  Background="{DynamicResource Chip.Background}"
                  BorderBrush="{DynamicResource Chip.Border}" BorderThickness="1">
                                                <TextBlock Text="{Binding BrandName}"
                       Foreground="{DynamicResource Chip.Foreground}"
                       FontSize="12"/>
                                                <Border.Style>
                                                    <Style TargetType="Border">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding BrandName}" Value="{x:Null}">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding BrandName}" Value="">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Border.Style>
                                            </Border>

                                            <!-- Category chip -->
                                            <Border Padding="8,2" CornerRadius="12" Margin="6,0,0,0"
                  Background="{DynamicResource Chip.Background}"
                  BorderBrush="{DynamicResource Chip.Border}" BorderThickness="1">
                                                <TextBlock Text="{Binding CategoryName}"
                       Foreground="{DynamicResource Chip.Foreground}"
                       FontSize="12"/>
                                                <Border.Style>
                                                    <Style TargetType="Border">
                                                        <Setter Property="Visibility" Value="Visible"/>
                                                        <Style.Triggers>
                                                            <DataTrigger Binding="{Binding CategoryName}" Value="{x:Null}">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                            <DataTrigger Binding="{Binding CategoryName}" Value="">
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </DataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Border.Style>
                                            </Border>
                                        </StackPanel>
                                    </Grid>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>

                    </DockPanel>
                </TabItem>
            </TabControl>

            <Border Grid.Column="1"/>

            <!-- RIGHT: Editable grid (shows product variants OR standalone items) -->
            <GroupBox Grid.Column="2" Style="{StaticResource ModernGroupBox}">
                <GroupBox.Header>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="Edit " />
                        <TextBlock x:Name="GridTitle" FontWeight="Bold" Text="Variants"/>
                    </StackPanel>
                </GroupBox.Header>
                <DockPanel>
                    
                    <!-- RIGHT TOOLBAR OVER GRID -->
                    <ToolBar DockPanel.Dock="Top" Style="{StaticResource ModernToolBar.Compact}" ToolBarTray.IsLocked="True">
                        <!-- Products mode only -->
                        <Button x:Name="BtnAddVariant" Content="Add Variant" Click="AddVariants_Click" Width="100"/>
                        <Separator ToolBar.OverflowMode="Never" Visibility="{Binding Visibility, Source={x:Reference BtnEditVariant}}"/>
                        <Button x:Name="BtnEditVariant" Content="Edit" Margin="6,0,0,0" Click="EditVariant_Click" Width="100">
                            <Button.Style>
                                <Style TargetType="Button">
                                    <!-- default: visible -->
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Cursor" Value="Hand"/>
                                        </Trigger>
                                        <!-- Hide if NOT in Variants mode -->
                                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>

                                        <!-- Hide if no row is selected -->
                                        <DataTrigger Binding="{Binding SelectedItem, ElementName=VariantsGrid}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>

                        <!-- Delete/Void Variant -->
                        <Separator ToolBar.OverflowMode="Never" Visibility="{Binding Visibility, Source={x:Reference BtnDeleteVoidVariant}}"/>
                        <Button x:Name="BtnDeleteVoidVariant" Content="Delete/Void" Click="DeleteOrVoidVariant_Click" Width="100">
                            <Button.Style>
                                <Style TargetType="Button">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Cursor" Value="Hand"/>
                                        </Trigger>
                                        <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource Self}}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding SelectedItem, ElementName=VariantsGrid}" Value="{x:Null}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>



                        <Separator ToolBar.OverflowMode="Never" Visibility="{Binding Visibility, Source={x:Reference BtnSaveChanges}}"/>
                        <Button x:Name="BtnSaveChanges" Content="Save Changes" Click="SaveVariants_Click" Visibility="Collapsed">
                            <Button.Style>
                                <Style TargetType="Button">
                                    <Setter Property="IsEnabled" Value="True"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Cursor" Value="Hand"/>
                                        </Trigger>
                                        <DataTrigger Binding="{Binding HasItems, ElementName=VariantsGrid}" Value="False">
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                    </ToolBar>



                    <DataGrid x:Name="VariantsGrid" 
                              Style="{StaticResource ModernDataGrid}"
                              AutoGenerateColumns="False"
                              CanUserAddRows="False"     
                              CanUserDeleteRows="True"
                              CellEditEnding="VariantsGrid_CellEditEnding"
                              CurrentCellChanged="VariantsGrid_CurrentCellChanged"
                              BeginningEdit="VariantsGrid_BeginningEdit"
                              SelectionChanged="VariantsGrid_SelectionChanged">
                        <DataGrid.RowStyle>
                            <Style TargetType="DataGridRow">
                                <!-- default -->
                                <Setter Property="Opacity" Value="1"/>
                                <Setter Property="Foreground" Value="{DynamicResource Chip.Foreground}"/>
                                <!-- Voided rows look greyed out -->
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsVoided}" Value="True">
                                        <Setter Property="Opacity" Value="0.55"/>
                                        <Setter Property="Foreground" Value="Gray"/>
                                        <!-- optionally lock editing for voided -->
                                        <Setter Property="IsHitTestVisible" Value="True"/>
                                        <!-- keep true if you still want selection -->
                                    </DataTrigger>
                                    <!-- If you want inactive-but-not-voided to look slightly dim -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsVoided}" Value="False"/>
                                            <Condition Binding="{Binding IsActive}" Value="False"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Opacity" Value="0.8"/>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </DataGrid.RowStyle>
                        <DataGrid.Columns>
                            <DataGridTextColumn x:Name="ColSku" Header="SKU"
                            Binding="{Binding Sku, UpdateSourceTrigger=PropertyChanged}" Width="140"/>
                            <DataGridTextColumn x:Name="ColBarcode" Header="Barcode" IsReadOnly="True"
                            Binding="{Binding Barcode, UpdateSourceTrigger=PropertyChanged}" Width="120"/>
                            <!-- Hide this in Variants mode -->
                            <DataGridTextColumn x:Name="ColName" Header="Name"
                            Binding="{Binding Name, UpdateSourceTrigger=PropertyChanged}" Width="200"/>
                            <DataGridTextColumn x:Name="ColPrice" Header="Price"
                            Binding="{Binding Price, UpdateSourceTrigger=PropertyChanged, StringFormat=N2}" Width="90"/>
                            <!-- Variant axes -->
                            <DataGridTextColumn x:Name="ColVar1Name" Header="Var1 Name"
                            Binding="{Binding Variant1Name, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                            <DataGridTextColumn x:Name="ColVar1Value" Header="Var1 Value"
                            Binding="{Binding Variant1Value, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                            <DataGridTextColumn x:Name="ColVar2Name" Header="Var2 Name"
                            Binding="{Binding Variant2Name, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                            <DataGridTextColumn x:Name="ColVar2Value" Header="Var2 Value"
                            Binding="{Binding Variant2Value, UpdateSourceTrigger=PropertyChanged}" Width="100"/>
                            <!-- Brand & Category (kept for Standalone view only; hidden in Variants mode) -->
                            <DataGridComboBoxColumn x:Name="ColBrand" Header="Brand"
                                SelectedValueBinding="{Binding BrandId, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                SelectedValuePath="Id" DisplayMemberPath="Name" Width="140">
                                <DataGridComboBoxColumn.ElementStyle>
                                    <Style TargetType="ComboBox">
                                        <Setter Property="ItemsSource"
        Value="{Binding RelativeSource={RelativeSource AncestorType=DataGrid},
                        Path=DataContext.Brands}"/>
                                        <Setter Property="IsReadOnly" Value="True"/>
                                        <Setter Property="IsHitTestVisible" Value="False"/>
                                        <Setter Property="Focusable" Value="False"/>
                                    </Style>
                                </DataGridComboBoxColumn.ElementStyle>
                                <DataGridComboBoxColumn.EditingElementStyle>
                                    <Style TargetType="ComboBox">
                                        <Setter Property="ItemsSource"
        Value="{Binding RelativeSource={RelativeSource AncestorType=DataGrid},
                        Path=DataContext.Brands}"/>
                                        <Setter Property="IsEditable" Value="True"/>
                                        <Setter Property="IsTextSearchEnabled" Value="True"/>
                                        <Setter Property="StaysOpenOnEdit" Value="True"/>
                                    </Style>
                                </DataGridComboBoxColumn.EditingElementStyle>
                            </DataGridComboBoxColumn>
                            <DataGridComboBoxColumn x:Name="ColCategory" Header="Category"
                                SelectedValueBinding="{Binding CategoryId, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                SelectedValuePath="Id" DisplayMemberPath="Name" Width="160">
                                <DataGridComboBoxColumn.ElementStyle>
                                    <Style TargetType="ComboBox">
                                        <Setter Property="ItemsSource"
        Value="{Binding RelativeSource={RelativeSource AncestorType=DataGrid},
                        Path=DataContext.Categories}"/>
                                        <Setter Property="IsReadOnly" Value="True"/>
                                        <Setter Property="IsHitTestVisible" Value="False"/>
                                        <Setter Property="Focusable" Value="False"/>
                                    </Style>
                                </DataGridComboBoxColumn.ElementStyle>
                                <DataGridComboBoxColumn.EditingElementStyle>
                                    <Style TargetType="ComboBox">
                                        <Setter Property="ItemsSource"
        Value="{Binding RelativeSource={RelativeSource AncestorType=DataGrid},
                        Path=DataContext.Categories}"/>
                                        <Setter Property="IsEditable" Value="True"/>
                                        <Setter Property="IsTextSearchEnabled" Value="True"/>
                                        <Setter Property="StaysOpenOnEdit" Value="True"/>
                                    </Style>
                                </DataGridComboBoxColumn.EditingElementStyle>
                            </DataGridComboBoxColumn>
                            <!-- Tax & Discounts -->
                            <DataGridTextColumn x:Name="ColTaxCode" Header="Tax Code"
                            Binding="{Binding TaxCode, UpdateSourceTrigger=PropertyChanged}" Width="90"/>
                            <DataGridTextColumn x:Name="ColTaxPct" Header="Tax %"
                            Binding="{Binding DefaultTaxRatePct, UpdateSourceTrigger=PropertyChanged, StringFormat=N2}" Width="70"/>
                            <DataGridCheckBoxColumn x:Name="ColTaxIncl" Header="Tax Incl."
                                Binding="{Binding TaxInclusive, UpdateSourceTrigger=PropertyChanged}" Width="70"/>
                            <DataGridTextColumn x:Name="ColDiscPct" Header="Disc %"
                            Binding="{Binding DefaultDiscountPct, UpdateSourceTrigger=PropertyChanged, StringFormat=N2}" Width="70"/>
                            <DataGridTextColumn x:Name="ColDiscAmt" Header="Disc Amt"
                            Binding="{Binding DefaultDiscountAmt, UpdateSourceTrigger=PropertyChanged, StringFormat=N2}" Width="80"/>
                            <DataGridTextColumn x:Name="ColUpdated" Header="Updated"
                            Binding="{Binding UpdatedAt}" IsReadOnly="True" Width="130"/>
                            <!-- IsActive toggle -->
                            <DataGridCheckBoxColumn x:Name="ColIsActive" Header="Active"
            Binding="{Binding IsActive, UpdateSourceTrigger=PropertyChanged}" Width="70"/>

                            <!-- IsVoided (read-only; you void via toolbar) -->
                            <DataGridCheckBoxColumn x:Name="ColIsVoided" Header="Voided"
            Binding="{Binding IsVoided}" IsReadOnly="True" Width="70"/>
                        </DataGrid.Columns>
                    </DataGrid>
                </DockPanel>
            </GroupBox>
        </Grid>
        
        
    </Grid>
</Window>
