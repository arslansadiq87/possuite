<Fluent:RibbonWindow x:Class="Pos.Client.Wpf.Windows.Shell.DashboardWindow"
                     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                     xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                     xmlns:shell="clr-namespace:Pos.Client.Wpf.Windows.Shell;assembly=Pos.Client.Wpf"
                     xmlns:att="clr-namespace:Pos.Client.Wpf.Attached"
                     xmlns:Fluent="urn:fluent-ribbon"
                     mc:Ignorable="d"
                     Title="POS — Dashboard"
                     Width="1200"
                     Height="800"
                     WindowStartupLocation="CenterScreen">

    <!-- ONE root content -->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Ribbon -->
        <Fluent:Ribbon x:Name="MainRibbon" VerticalAlignment="Bottom">

            <!-- Backstage (MUST wrap in BackstageTabControl) -->
            <Fluent:Ribbon.Menu>
                <Fluent:Backstage x:Name="MainBackstage">
                    <Fluent:BackstageTabControl>
                        <Fluent:BackstageTabItem Header="Settings" KeyTip="S">
                            <ScrollViewer Padding="16">
                                <StackPanel>
                                    <TextBlock Text="Application Settings" FontSize="18" FontWeight="SemiBold" Margin="0,0,0,12"/>
                                    <!-- Put your settings UI here -->
                                    <!-- ✅ Maintenance block -->
                                    <GroupBox Header="Maintenance" Margin="0,16,0,0">
                                        <StackPanel Margin="12,8,12,12" Orientation="Vertical" >
                                            <TextBlock Text="Reset Stock Data" FontWeight="SemiBold" Margin="0,0,0,6"/>
                                            <TextBlock Text="Deletes Sales, Purchases, Transfers (and their lines) plus stock ledger for those docs. Opening stock and master data are preserved. A timestamped DB backup will be created."
                     TextWrapping="Wrap" Margin="0,0,0,12"/>
                                            <Button Content="⚠ Reset Stock Data"
                  Click="ResetStockButton_Click"
                  Padding="14,8"
                  HorizontalAlignment="Left"
                  Background="#FFE53935"
                  Foreground="White"/>
                                        </StackPanel>
                                    </GroupBox>
                                </StackPanel>
                            </ScrollViewer>
                        </Fluent:BackstageTabItem>

                        <Fluent:BackstageTabItem Header="About" KeyTip="A">
                            <StackPanel Margin="16">
                                <TextBlock Text="PosSuite" FontSize="18" FontWeight="SemiBold"/>
                                <TextBlock Text="Multi-outlet POS with offline-first sync" Margin="0,8,0,0"/>
                                <Button Content="Exit" Width="110" Margin="0,12,0,0" Command="{Binding ExitCmd}"/>
                            </StackPanel>
                        </Fluent:BackstageTabItem>

                        <!-- Optional: buttons directly inside the Backstage (valid) -->
                        <!--<Fluent:Button Header="Theme: Blue" />-->
                    </Fluent:BackstageTabControl>
                </Fluent:Backstage>
            </Fluent:Ribbon.Menu>

            <!-- Quick Access (v11-correct) -->
            <Fluent:Ribbon.QuickAccessItems>
                <!-- Bind to existing controls or provide inline content -->
                <Fluent:QuickAccessMenuItem Target="{Binding ElementName=BtnNewSale}" IsChecked="True"/>
                <Fluent:QuickAccessMenuItem Target="{Binding ElementName=BtnReports}" IsChecked="True"/>
            </Fluent:Ribbon.QuickAccessItems>

            <!-- Contextual Tab Groups MUST be in this collection -->
            <Fluent:Ribbon.ContextualGroups>
                <Fluent:RibbonContextualTabGroup x:Name="transferGroup"
                                         Header="Transfer"
                                         Visibility="{Binding TransferTabVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />
            </Fluent:Ribbon.ContextualGroups>

            <!-- Normal tabs -->
            <Fluent:RibbonTabItem Header="Home" KeyTip="H">
                <Fluent:RibbonGroupBox Header="Sales" >

                    <Fluent:Button x:Name="BtnNewSale" IsTabStop="False" Header="New&#160;Sale"
                         KeyTip="N" Command="{Binding NewSaleCmd}" Icon="{StaticResource Icon.Add}"/>
                    <Fluent:Button Header="Returns" Command="{Binding OpenReturnsCmd}"/>
                    <Fluent:Button Header="Sale Center" Command="{Binding OpenSaleCenterCmd}"/>
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox Header="Inventory">
                    <Fluent:Button Header="Purchase" Command="{Binding OpenPurchaseCmd}"/>
                    <Fluent:Button Header="Purchase Center" Command="{Binding OpenPurchaseInvoiceCenterCmd}"/>
                    <Fluent:Button Header="Transfer" Command="{Binding OpenTransferCmd}"/>
                    <Fluent:Button Header="Stock" Command="{Binding OpenStockCheckCmd}"/>
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox Header="Admin">
                    <Fluent:Button Header="Products"          Command="{Binding OpenProductsCmd}"/>
                    <Fluent:Button Header="Parties"         Command="{Binding OpenPartiesCmd}"/>
                    <Fluent:Button Header="Outlets/Counters"  Command="{Binding OpenOutletsCountersCmd}"/>
                    <Fluent:Button Header="Warehouses"  Command="{Binding OpenWarehousesCmd}"/>
                    <Fluent:Button Header="Users"             Command="{Binding OpenUsersCmd}"/>
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox Header="Reports">
                    <Fluent:Button x:Name="BtnReports"
                         Header="Open&#160;Reports"
                         Command="{Binding OpenReportsCmd}"/>
                </Fluent:RibbonGroupBox>

                <Fluent:RibbonGroupBox Header="Till">
                    <Fluent:Button Header="Open Till"
                 Command="{Binding OpenTillCmd}">
                        <Fluent:Button.Style>
                            <Style TargetType="{x:Type Fluent:Button}">
                                <Setter Property="Visibility" Value="Visible"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsTillOpen}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Fluent:Button.Style>
                    </Fluent:Button>
                    <Fluent:Button Header="Till Summary"
               KeyTip="TS"
               Command="{Binding OpenTillSummaryCmd}"/>


                    <Fluent:Button Header="Close Till"
                 Command="{Binding CloseTillCmd}">
                        <Fluent:Button.Style>
                            <Style TargetType="{x:Type Fluent:Button}">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsTillOpen}" Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Fluent:Button.Style>
                    </Fluent:Button>
                </Fluent:RibbonGroupBox>


            </Fluent:RibbonTabItem>

            <!-- Contextual tab: associate via Group -->
            <Fluent:RibbonTabItem Header="Transfer Tools" Group="{Binding Source={x:Reference transferGroup}}">
                <Fluent:RibbonGroupBox Header="Receive">
                    <Fluent:Button Header="Receive Dispatch" Command="{Binding ReceiveDispatchCmd}"/>
                </Fluent:RibbonGroupBox>
            </Fluent:RibbonTabItem>

        </Fluent:Ribbon>

        <!-- Content -->
        <!-- Content (Tabbed) -->
        <Border Grid.Row="1" CornerRadius="8" Padding="2" Margin="2"
        Background="{DynamicResource ControlBackgroundBrush}">
            <!-- Center host: Tabbed documents -->
            <TabControl x:Name="DocumentTabs"
                FocusManager.IsFocusScope="True"
                ItemsSource="{Binding Tabs}"
                SelectedItem="{Binding ActiveTab, Mode=TwoWay}"
                Margin="0"
                BorderThickness="0">
                <!-- Tab headers -->
                <!-- Tab headers -->
                <TabControl.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" Margin="0,0,4,0">
                            <TextBlock Text="{Binding Title}" Margin="0,0,8,0"/>
                            <Button Content="{StaticResource Icon.Close}"
        Style="{StaticResource Btn.IconBare}"
        att:IconProps.IconSize="12"
        Width="18" Height="18" Padding="0"
        Command="{Binding DataContext.CloseActiveTabCmd, RelativeSource={RelativeSource AncestorType=TabControl}}"
        ToolTip="Close" Focusable="False"/>


                        </StackPanel>
                    </DataTemplate>
                </TabControl.ItemTemplate>

                <!-- Tab body -->
                <TabControl.ContentTemplate>
                    <DataTemplate>
                        <ContentPresenter Content="{Binding Content}"/>
                    </DataTemplate>
                </TabControl.ContentTemplate>


                <!-- Optional: context menu on tabs -->
                <TabControl.ItemContainerStyle>
                    <Style TargetType="TabItem">
                        <Setter Property="ContextMenu">
                            <Setter.Value>
                                <ContextMenu>
                                    <MenuItem Header="Close" Command="{Binding PlacementTarget.DataContext.CloseActiveTabCmd, RelativeSource={RelativeSource AncestorType=TabControl}}"/>
                                    <Separator/>
                                    <MenuItem Header="Close Others" Command="{Binding PlacementTarget.DataContext.CloseOthersCmd, RelativeSource={RelativeSource AncestorType=TabControl}}"/>
                                    <MenuItem Header="Close Tabs to the Left" Command="{Binding PlacementTarget.DataContext.CloseLeftCmd, RelativeSource={RelativeSource AncestorType=TabControl}}"/>
                                    <MenuItem Header="Close Tabs to the Right" Command="{Binding PlacementTarget.DataContext.CloseRightCmd, RelativeSource={RelativeSource AncestorType=TabControl}}"/>
                                    <Separator/>
                                    <MenuItem Header="Close All" Command="{Binding PlacementTarget.DataContext.CloseAllTabsCmd, RelativeSource={RelativeSource AncestorType=TabControl}}"/>
                                </ContextMenu>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </TabControl.ItemContainerStyle>
            </TabControl>
        </Border>


        <!-- Status Bar -->
        <Fluent:StatusBar Grid.Row="2" MinHeight="28" Padding="8,0">
            <!-- Ensure DockPanel behavior like classic WPF StatusBar -->
            <Fluent:StatusBar.ItemContainerStyle>
                <Style TargetType="{x:Type Fluent:StatusBarItem}">
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="Padding" Value="8,0"/>
                </Style>
            </Fluent:StatusBar.ItemContainerStyle>
            <Fluent:StatusBar.ItemsPanel>
                <ItemsPanelTemplate>
                    <DockPanel LastChildFill="False"/>
                </ItemsPanelTemplate>
            </Fluent:StatusBar.ItemsPanel>

            <!-- RIGHT cluster (dock first) -->
            <Fluent:StatusBarItem DockPanel.Dock="Right" Padding="8,0">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="{Binding OnlineText}" Margin="8,0" TextTrimming="CharacterEllipsis"/>
                    <TextBlock Text="|" Margin="8,0" Opacity=".5"/>
                    <TextBlock Text="{Binding LastSyncText}" Margin="8,0" TextTrimming="CharacterEllipsis"/>
                    <TextBlock Text="|" Margin="8,0" Opacity=".5"/>
                    <TextBlock Text="{Binding TillStatus}" Margin="8,0" FontWeight="SemiBold" TextTrimming="CharacterEllipsis"/>
                </StackPanel>
            </Fluent:StatusBarItem>

            <!-- LEFT cluster (default dock = Left) -->
            <Fluent:StatusBarItem Padding="8,0">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="{Binding OutletName}" Margin="8,0"/>
                    <TextBlock Text="|" Margin="8,0" Opacity=".5"/>
                    <TextBlock Text="{Binding CounterName}" Margin="8,0"/>
                    <TextBlock Text="|" Margin="8,0" Opacity=".5"/>
                    <TextBlock Text="{Binding CurrentUserName}" Margin="8,0"/>
                </StackPanel>
            </Fluent:StatusBarItem>
        </Fluent:StatusBar>





        <!-- Overlay Layer: place this right before the closing </Grid> -->
        <Grid x:Name="OverlayLayer"
      Grid.RowSpan="3"
      Panel.ZIndex="999"
      Visibility="{Binding IsOverlayOpen, Converter={StaticResource BooleanToVisibilityConverter}}"
      Focusable="False"
      IsVisibleChanged="OverlayLayer_IsVisibleChanged"
      Background="#80000000">

            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Border Grid.Row="1" Grid.Column="1"
                    CornerRadius="12"
                    Padding="16"
                    Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
                    MinWidth="420" MaxWidth="720"
                    SnapsToDevicePixels="True"
                    Effect="{DynamicResource ShadowEffect}">

                    <ContentPresenter Content="{Binding OverlayView}"/>
                </Border>

            </Grid>
        </Grid>




    </Grid>
</Fluent:RibbonWindow>

