<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib">

    <sys:Double   x:Key="App.FontSize.DataGrid">16</sys:Double>
    <FontWeight   x:Key="App.FontWeight.DataGrid">SemiBold</FontWeight>
    <!-- Implicit styles (no x:Key) => apply to all DataGrids -->
    <Style TargetType="DataGrid">
        <Setter Property="FontSize"   Value="{DynamicResource App.FontSize.DataGrid}"/>
        <Setter Property="FontWeight" Value="{DynamicResource App.FontWeight.DataGrid}"/>
    </Style>

    <!-- Keep headers/rows/cells consistent -->
    <Style TargetType="DataGridColumnHeader">
        <Setter Property="FontSize"   Value="{DynamicResource App.FontSize.DataGrid}"/>
        <Setter Property="FontWeight" Value="{DynamicResource App.FontWeight.DataGrid}"/>
    </Style>
    <Style TargetType="DataGridCell">
        <Setter Property="FontSize"   Value="{DynamicResource App.FontSize.DataGrid}"/>
        <Setter Property="FontWeight" Value="{DynamicResource App.FontWeight.DataGrid}"/>
    </Style>
    <Style TargetType="DataGridRow">
        <Setter Property="FontSize"   Value="{DynamicResource App.FontSize.DataGrid}"/>
        <Setter Property="FontWeight" Value="{DynamicResource App.FontWeight.DataGrid}"/>
    </Style>


    <!-- ===== Color tokens ===== -->
    <SolidColorBrush x:Key="Clr.Primary"   Color="#4CAF50"/>
    <SolidColorBrush x:Key="Clr.Primary+H" Color="#43A047"/>
    <SolidColorBrush x:Key="Clr.Primary+P" Color="#2E7D32"/>
    <SolidColorBrush x:Key="Clr.OnPrimary" Color="#FFFFFFFF"/>

    <SolidColorBrush x:Key="Clr.Neutral"   Color="#FF2C2C2C"/>
    <SolidColorBrush x:Key="Clr.Border"    Color="#19000000"/>
    <SolidColorBrush x:Key="Clr.Focus"     Color="#803197F5"/>

    <SolidColorBrush x:Key="Clr.Danger"    Color="#E53935"/>
    <SolidColorBrush x:Key="Clr.Danger+H"  Color="#D32F2F"/>
    <SolidColorBrush x:Key="Clr.Danger+P"  Color="#C62828"/>
    <SolidColorBrush x:Key="Clr.OnDanger"  Color="#FFFFFFFF"/>

    <!-- Soft fills for hover/pressed on outline/ghost -->
    <SolidColorBrush x:Key="Clr.PrimarySoft+H" Color="#1A4CAF50"/>
    <SolidColorBrush x:Key="Clr.PrimarySoft+P" Color="#334CAF50"/>
    <SolidColorBrush x:Key="Clr.DangerSoft+H"  Color="#1AE53935"/>
    <SolidColorBrush x:Key="Clr.DangerSoft+P"  Color="#33E53935"/>

    <SolidColorBrush x:Key="Clr.DisabledFG" Color="#FFBDBDBD"/>
    <SolidColorBrush x:Key="Clr.DisabledBG" Color="#14FFFFFF"/>
    <SolidColorBrush x:Key="Clr.DisabledBR" Color="#33FFFFFF"/>

    <!-- ===== Size & shape tokens ===== -->
    <sys:Double x:Key="Btn.FontSize">14</sys:Double>
    <Thickness x:Key="Btn.Padding">12,6</Thickness>
    <CornerRadius x:Key="Btn.Radius">0</CornerRadius>
    <Thickness x:Key="Btn.BorderThickness">1</Thickness>

    <!-- Input-specific brushes (you can tweak) -->
    <SolidColorBrush x:Key="Clr.InputBG"        Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="Clr.InputBG.ReadOnly" Color="#FFF6F7F8"/>
    <SolidColorBrush x:Key="Clr.InputPlaceholder" Color="#99000000"/>
    <SolidColorBrush x:Key="Clr.InputText"      Color="#FF111111"/>

    <SolidColorBrush x:Key="Clr.Error"    Color="#FFB00020"/>
    <SolidColorBrush x:Key="Clr.Error+H"  Color="#FFC02A2A"/>
    <SolidColorBrush x:Key="Clr.ErrorSoft" Color="#10B00020"/>

    <!-- Size & shape -->
    <sys:Double   x:Key="Txt.FontSize">14</sys:Double>
    <Thickness    x:Key="Txt.Padding">12,6</Thickness>
    <CornerRadius x:Key="Txt.Radius">0</CornerRadius>
    <Thickness    x:Key="Txt.BorderThickness">1</Thickness>

    <!-- TextBlock colors -->
    <SolidColorBrush x:Key="Label.Primary"   Color="#FF111111"/>
    <SolidColorBrush x:Key="Label.Secondary" Color="#99000000"/>
    <SolidColorBrush x:Key="Label.Danger"    Color="#E53935"/>
    <SolidColorBrush x:Key="Label.Success"   Color="#388E3C"/>
    <SolidColorBrush x:Key="Label.Info"      Color="#1976D2"/>
    <SolidColorBrush x:Key="Label.Muted"     Color="#FF757575"/>

    <!-- Font sizes -->
    <sys:Double x:Key="LblSize.H1">26</sys:Double>
    <sys:Double x:Key="LblSize.H2">22</sys:Double>
    <sys:Double x:Key="LblSize.H3">18</sys:Double>
    <sys:Double x:Key="LblSize.Body">14</sys:Double>
    <sys:Double x:Key="LblSize.Small">12</sys:Double>



    <Style x:Key="Btn.Base" TargetType="Button">
        <Setter Property="FontSize"        Value="{DynamicResource Btn.FontSize}"/>
        <Setter Property="FontWeight"      Value="SemiBold"/>
        <Setter Property="Padding"         Value="{DynamicResource Btn.Padding}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource Btn.BorderThickness}"/>
        <Setter Property="Cursor"          Value="Hand"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Root"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{DynamicResource Btn.Radius}">
                        <ContentPresenter HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      RecognizesAccessKey="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Focus ring -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource Clr.Focus}"/>
                            <Setter TargetName="Root" Property="BorderThickness" Value="2"/>
                        </Trigger>
                        <!-- Press feedback -->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Root" Property="RenderTransform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="0.98" ScaleY="0.98"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource Clr.DisabledFG}"/>
                            <Setter TargetName="Root" Property="Background" Value="{DynamicResource Clr.DisabledBG}"/>
                            <Setter TargetName="Root" Property="BorderBrush" Value="{DynamicResource Clr.DisabledBR}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Btn.Primary" BasedOn="{StaticResource Btn.Base}" TargetType="Button">
        <Setter Property="Foreground"  Value="{DynamicResource Clr.OnPrimary}"/>
        <Setter Property="Background"  Value="{DynamicResource Clr.Primary}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Clr.Primary+H}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource Clr.Primary+P}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Btn.Outlined" BasedOn="{StaticResource Btn.Base}" TargetType="Button">
        <Setter Property="Foreground"  Value="{DynamicResource Clr.Primary}"/>
        <Setter Property="Background"  Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Clr.Primary}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background"  Value="{DynamicResource Clr.PrimarySoft+H}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Clr.Primary+H}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background"  Value="{DynamicResource Clr.PrimarySoft+P}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Clr.Primary+P}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Btn.Danger" BasedOn="{StaticResource Btn.Base}" TargetType="Button">
        <Setter Property="Foreground"  Value="{DynamicResource Clr.OnDanger}"/>
        <Setter Property="Background"  Value="{DynamicResource Clr.Danger}"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Clr.Danger+H}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource Clr.Danger+P}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Btn.Ghost" BasedOn="{StaticResource Btn.Base}" TargetType="Button">
        <Setter Property="Foreground"  Value="{DynamicResource Clr.Neutral}"/>
        <Setter Property="Background"  Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#0F000000"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#19000000"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Btn.Icon" BasedOn="{StaticResource Btn.Outlined}" TargetType="Button">
        <Setter Property="Width"  Value="36"/>
        <Setter Property="Height" Value="36"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Viewbox Stretch="Uniform" Width="18" Height="18">
                        <!-- Put a PathGeometry or Glyph here; default shows text content -->
                        <ContentPresenter/>
                    </Viewbox>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Btn.Tile" BasedOn="{StaticResource Btn.Outlined}" TargetType="Button">
        <Setter Property="Width"  Value="160"/>
        <Setter Property="Height" Value="100"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Tag}"
                               FontSize="26" Margin="0,0,0,4" TextAlignment="Center"/>
                        <TextBlock Text="{Binding}" FontSize="16" TextAlignment="Center"/>
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style x:Key="Txt.Base" TargetType="TextBox">
        <Setter Property="FontSize"     Value="{DynamicResource Txt.FontSize}"/>
        <Setter Property="Foreground"   Value="{DynamicResource Clr.InputText}"/>
        <Setter Property="Padding"      Value="{DynamicResource Txt.Padding}"/>
        <Setter Property="Background"   Value="{DynamicResource Clr.InputBG}"/>
        <Setter Property="BorderBrush"  Value="{DynamicResource Clr.Border}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource Txt.BorderThickness}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid>
                        <!-- Outer border -->
                        <Border x:Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{DynamicResource Txt.Radius}"/>

                        <!-- Content host -->
                        <ScrollViewer x:Name="PART_ContentHost"
                                  Margin="0"
                                  Focusable="False"
                                  Background="{x:Null}"/>

                        <!-- Watermark / placeholder: bind text to Tag -->
                        <TextBlock x:Name="Watermark"
                               IsHitTestVisible="False"
                               Margin="{TemplateBinding Padding}"
                               Foreground="{DynamicResource Clr.InputPlaceholder}"
                               Text="{TemplateBinding Tag}"
                               TextTrimming="CharacterEllipsis"
                               Visibility="Collapsed"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!-- Show watermark when empty and not focused -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                                <Condition Property="IsKeyboardFocusWithin" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Watermark" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>

                        <!-- Hover -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Clr.Primary+H}"/>
                        </Trigger>

                        <!-- Focus -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush"     Value="{DynamicResource Clr.Focus}"/>
                            <Setter TargetName="Bd" Property="BorderThickness" Value="1"/>
                        </Trigger>

                        <!-- Read-only -->
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Clr.InputBG.ReadOnly}"/>
                        </Trigger>

                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground"  Value="{DynamicResource Clr.DisabledFG}"/>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource Clr.DisabledBG}"/>
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Clr.DisabledBR}"/>
                        </Trigger>

                        <!-- Validation error (uses WPF Validation APIs) -->
                        <Trigger Property="Validation.HasError" Value="True">
                            <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Clr.Error}"/>
                            <Setter TargetName="Bd" Property="Background"  Value="{DynamicResource Clr.ErrorSoft}"/>
                            <Setter Property="ToolTip"
                                Value="{Binding RelativeSource={RelativeSource Self},
                                                Path=(Validation.Errors)[0].ErrorContent}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

       <!-- Outlined (default look; uses base) -->
    <Style x:Key="Txt.Outlined" BasedOn="{StaticResource Txt.Base}" TargetType="TextBox"/>

    <!-- Filled (material-ish subtle fill) -->
    <Style x:Key="Txt.Filled" BasedOn="{StaticResource Txt.Base}" TargetType="TextBox">
        <Setter Property="Background" Value="#0D000000"/>
        <Setter Property="BorderBrush" Value="#22000000"/>
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Clr.Focus}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Inline (borderless; for toolbars, grids’ quick filters, etc.) -->
    <Style x:Key="Txt.Inline" BasedOn="{StaticResource Txt.Base}" TargetType="TextBox">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="4,2"/>
        <Style.Triggers>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderThickness" Value="{DynamicResource Txt.BorderThickness}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Clr.Focus}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Numeric (right-align + monospaced digits help scanning totals) -->
    <Style x:Key="Txt.Numeric" BasedOn="{StaticResource Txt.Outlined}" TargetType="TextBox">
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="FontFamily"    Value="Consolas, Segoe UI, Arial"/>
    </Style>

    <!-- Reusable search box control template -->
    <ControlTemplate x:Key="Tpl.SearchBox" TargetType="TextBox">
        <Grid>
            <Border x:Name="Bd"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{DynamicResource Txt.Radius}"/>
            <Grid Margin="8,0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <!-- Icon -->
                <Viewbox Width="14" Height="14" VerticalAlignment="Center">
                    <Path Data="M10.5 17c-.13.004-.253.058-.344.15L.64 26.652c-.896.893-.776 2.134-.105 2.81.67.674 1.913.795 2.81-.103l9.49-9.49c.492-.472-.25-1.182-.706-.708l-9.49 9.49c-.58.58-1.07.43-1.396.104-.326-.328-.47-.826.102-1.397l9.517-9.503c.326-.318.084-.857-.363-.857zm8.45-14.93c-1.604.213-3.146.91-4.39 2.063-.49.453.21 1.17.68.734 2.18-2.02 5.392-2.445 8.022-1.06.58.332 1.053-.603.465-.885-1.5-.79-3.17-1.064-4.776-.852zM20 0c-5.517 0-10 4.483-10 10s4.483 10 10 10 10-4.483 10-10S25.517 0 20 0zm0 1c4.976 0 9 4.024 9 9s-4.024 9-9 9-9-4.024-9-9 4.024-9 9-9z"
          Fill="{DynamicResource Clr.Primary}"
          Stretch="Uniform"
          Width="14"
          Height="14"/>
                </Viewbox>

                
                <!-- Text -->
                <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1" Margin="6,0,0,0"
                          Focusable="False" Background="{x:Null}"/>
            </Grid>
            <!-- Watermark -->
            <TextBlock x:Name="Watermark"
                   Margin="{TemplateBinding Padding}"
                   Foreground="{DynamicResource Clr.InputPlaceholder}"
                   Text="{TemplateBinding Tag}"
                   Visibility="Collapsed"/>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Text" Value=""/>
                    <Condition Property="IsKeyboardFocusWithin" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Watermark" Property="Visibility" Value="Visible"/>
            </MultiTrigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter TargetName="Bd" Property="BorderBrush"     Value="{DynamicResource Clr.Focus}"/>
                <Setter TargetName="Bd" Property="BorderThickness" Value="2"/>
            </Trigger>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource Clr.Error}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Style that uses the search template -->
    <Style x:Key="Txt.Search" BasedOn="{StaticResource Txt.Base}" TargetType="TextBox">
        <Setter Property="Template" Value="{StaticResource Tpl.SearchBox}"/>
    </Style>

    <!-- ModernPasswordBox but themed via tokens -->
    <Style x:Key="Txt.Password" TargetType="PasswordBox">
        <Setter Property="Foreground" Value="{DynamicResource Clr.InputText}"/>
        <Setter Property="FontSize" Value="{DynamicResource Txt.FontSize}"/>
        <Setter Property="Padding" Value="8,4"/>
        <Setter Property="Background" Value="{DynamicResource Clr.InputBG}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource Clr.Border}"/>
        <Setter Property="BorderThickness" Value="{DynamicResource Txt.BorderThickness}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="PasswordBox">
                    <Border x:Name="Base"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="6"
                    Padding="{TemplateBinding Padding}">
                        <ScrollViewer x:Name="PART_ContentHost"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Hover -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Base" Property="BorderBrush" Value="{DynamicResource Clr.Primary+H}"/>
                        </Trigger>
                        <!-- Focus -->
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="Base" Property="BorderBrush" Value="{DynamicResource Clr.Focus}"/>
                            <Setter TargetName="Base" Property="BorderThickness" Value="2"/>
                        </Trigger>
                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Base" Property="Background" Value="{DynamicResource Clr.DisabledFG}"/>
                            <Setter TargetName="Base" Property="BorderBrush" Value="{DynamicResource Clr.DisabledBG}"/>
                            <Setter Property="Foreground" Value="{DynamicResource Clr.DisabledBR}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Lbl.Base" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource LblSize.Body}"/>
        <Setter Property="Foreground" Value="{DynamicResource Label.Primary}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <Style x:Key="Lbl.H1" BasedOn="{StaticResource Lbl.Base}" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource LblSize.H1}"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="Lbl.H2" BasedOn="{StaticResource Lbl.Base}" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource LblSize.H2}"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
    </Style>

    <Style x:Key="Lbl.H3" BasedOn="{StaticResource Lbl.Base}" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource LblSize.H3}"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
    </Style>

    <Style x:Key="Lbl.Body" BasedOn="{StaticResource Lbl.Base}" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource LblSize.Body}"/>
    </Style>

    <Style x:Key="Lbl.Small" BasedOn="{StaticResource Lbl.Base}" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource LblSize.Small}"/>
        <Setter Property="Foreground" Value="{DynamicResource Label.Secondary}"/>
    </Style>

    <Style x:Key="Lbl.Danger" BasedOn="{StaticResource Lbl.Base}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource Label.Danger}"/>
    </Style>

    <Style x:Key="Lbl.Success" BasedOn="{StaticResource Lbl.Base}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource Label.Success}"/>
    </Style>

    <Style x:Key="Lbl.Info" BasedOn="{StaticResource Lbl.Base}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource Label.Info}"/>
    </Style>

    <Style x:Key="Lbl.Muted" BasedOn="{StaticResource Lbl.Base}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource Label.Muted}"/>
    </Style>

    <Style x:Key="Lbl.Center" BasedOn="{StaticResource Lbl.Base}" TargetType="TextBlock">
        <Setter Property="TextAlignment" Value="Center"/>
    </Style>

    <Style x:Key="Lbl.Right" BasedOn="{StaticResource Lbl.Base}" TargetType="TextBlock">
        <Setter Property="TextAlignment" Value="Right"/>
    </Style>

    
    
    <Style x:Key="ModernCheckBox" TargetType="CheckBox">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <!-- Box -->
                        <Border x:Name="Box"
                            Width="18" Height="18"
                            CornerRadius="4"
                            BorderBrush="#BDBDBD"
                            BorderThickness="1"
                            Background="White"
                            Margin="0,0,6,0"
                            SnapsToDevicePixels="True"/>
                        <!-- Label -->
                        <ContentPresenter VerticalAlignment="Center"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <!-- Hover -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Box" Property="BorderBrush" Value="#4CAF50"/>
                        </Trigger>
                        <!-- Checked -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Box" Property="Background" Value="#4CAF50"/>
                            <Setter TargetName="Box" Property="BorderBrush" Value="#4CAF50"/>
                        </Trigger>
                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Box" Property="Background" Value="#EEEEEE"/>
                            <Setter TargetName="Box" Property="BorderBrush" Value="#BDBDBD"/>
                            <Setter Property="Foreground" Value="#9E9E9E"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    
    <Style x:Key="ModernTextBlock" TargetType="TextBlock">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Margin" Value="2,0,2,0"/>
        <Style.Triggers>
            <!-- Disabled state -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#9E9E9E"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Subtle / Minimal DataGrid -->
    <Style x:Key="ModernDataGrid" TargetType="DataGrid">
        <!-- Base -->
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="#E0E0E0"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="RowHeight" Value="30"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="GridLinesVisibility" Value="Horizontal"/>
        <Setter Property="HorizontalGridLinesBrush" Value="#EEEEEE"/>
        <Setter Property="VerticalGridLinesBrush" Value="#EEEEEE"/>
        <Setter Property="RowHeaderWidth" Value="0"/>
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="CanUserAddRows" Value="False"/>
        <Setter Property="CanUserDeleteRows" Value="False"/>
        <Setter Property="CanUserResizeRows" Value="False"/>

        <!-- Column headers: soft gray, no loud colors -->
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="#F5F5F5"/>
                    <Setter Property="Foreground" Value="#212121"/>
                    <Setter Property="FontWeight" Value="SemiBold"/>
                    <Setter Property="Padding" Value="8,4"/>
                    <Setter Property="BorderBrush" Value="#E0E0E0"/>
                    <Setter Property="BorderThickness" Value="0,0,0,1"/>
                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                    <Style.Triggers>
                        <!-- Very subtle hover -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#EEEEEE"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>

        <!-- Rows: white + ultra light alternation; tiny hover; gentle selection -->
        <Setter Property="RowStyle">
            <Setter.Value>
                <Style TargetType="DataGridRow">
                    <Setter Property="Background" Value="White"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Style.Triggers>
                        <!-- Alternating row -->
                        <Trigger Property="AlternationIndex" Value="1">
                            <Setter Property="Background" Value="#FAFAFA"/>
                        </Trigger>
                        <!-- Hover (subtle) -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="#F5F5F5"/>
                        </Trigger>
                        <!-- Selected row: faint tint + thin left accent in green -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#F0F8F1"/>
                            <!-- very light greenish -->
                            <Setter Property="BorderBrush" Value="#4CAF50"/>
                            <Setter Property="BorderThickness" Value="3,0,0,0"/>
                            <!-- slim left bar -->
                            <Setter Property="Foreground" Value="#111"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>

        <!-- Cells: no borders; focused cell gets a hairline green outline -->
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                    <Setter Property="Padding" Value="8,4"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                    <Style.Triggers>
                        <!-- Selected cell (keep it subtle) -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="#EAF5ED"/>
                            <Setter Property="Foreground" Value="#111"/>
                        </Trigger>
                        <!-- Keyboard focus: thin green outline, no fill change -->
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="BorderBrush" Value="#4CAF50"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

  

    
    

    <Style x:Key="ModernListBox" TargetType="ListBox">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderBrush" Value="#BDBDBD"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBox">
                    <Border x:Name="Base"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="6"
                        SnapsToDevicePixels="True">
                        <ScrollViewer Focusable="False">
                            <ItemsPresenter />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Item Style -->
    <Style x:Key="ModernListBoxItem" TargetType="ListBoxItem">
        <Setter Property="Padding" Value="8,4"/>
        <Setter Property="Margin" Value="2,2,2,0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="Base"
                        Background="{TemplateBinding Background}"
                        CornerRadius="4"
                        Padding="{TemplateBinding Padding}">
                        <ContentPresenter VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- Hover -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Base" Property="Background" Value="#F5F5F5"/>
                        </Trigger>
                        <!-- Selected -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Base" Property="Background" Value="#4CAF50"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <!-- Disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Base" Property="Background" Value="#EEEEEE"/>
                            <Setter Property="Foreground" Value="#9E9E9E"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!-- Compact, horizontal toolbar that actually uses a ToolBarPanel -->
    <Style x:Key="ModernToolBar.Compact" TargetType="ToolBar">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolBar">
                    <Grid>
                        <!-- content row -->
                        <Border Background="{TemplateBinding Background}">
                            <!-- IMPORTANT: ToolBarPanel keeps items in a horizontal row -->
                            <ToolBarPanel IsItemsHost="True" Margin="0" />
                        </Border>
                        <!-- subtle bottom divider -->
                        <Rectangle Height="1" Fill="#E0E0E0" VerticalAlignment="Bottom"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Buttons INSIDE toolbar (auto-applied) -->
    <Style x:Key="{x:Static ToolBar.ButtonStyleKey}" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#212121"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="10,6"/>
        <Setter Property="Margin" Value="4,0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Base" Background="{TemplateBinding Background}" CornerRadius="6" Padding="{TemplateBinding Padding}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Base" Property="Background" Value="#F5F5F5"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Base" Property="Background" Value="#E8F5E9"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#9E9E9E"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Vertical separator INSIDE toolbar (auto-applied) -->
    <Style x:Key="{x:Static ToolBar.SeparatorStyleKey}" TargetType="Separator">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border Width="1" Height="20" Margin="6,0"
                        VerticalAlignment="Center" Background="#E0E0E0"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TabControl container -->
    <Style x:Key="ModernTabControl" TargetType="TabControl">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="#E0E0E0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <!-- headers -->
                            <RowDefinition Height="*"/>
                            <!-- content -->
                        </Grid.RowDefinitions>

                        <!-- Header strip + bottom divider -->
                        <Grid Grid.Row="0">
                            <TabPanel x:Name="HeaderPanel"
                                  Background="Transparent"
                                  IsItemsHost="True"
                                  Margin="0,0,0,0"/>
                            <Rectangle Height="1"
                                   Fill="#E0E0E0"
                                   VerticalAlignment="Bottom"/>
                        </Grid>

                        <!-- Content area -->
                        <Border Grid.Row="1"
                            Background="White"
                            BorderBrush="#E0E0E0"
                            BorderThickness="1"
                            CornerRadius="8"
                            Margin="0,8,0,0">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                          Margin="16"
                                          ContentSource="SelectedContent"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TabItem header (subtle hover, green underline when selected) -->
    <Style x:Key="ModernTabItem" TargetType="TabItem">
        <Setter Property="Foreground" Value="#212121"/>
        <Setter Property="Padding" Value="14,8"/>
        <Setter Property="Margin" Value="0,0,10,0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid>
                        <!-- Header button -->
                        <Border x:Name="HeaderRoot"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            CornerRadius="6">
                            <ContentPresenter
                            ContentSource="Header"
                            RecognizesAccessKey="True"
                            VerticalAlignment="Center"
                            Margin="8,2"/>
                        </Border>

                        <!-- Selection indicator (bottom line) -->
                        <Border x:Name="Indicator"
                            Height="3"
                            Background="#4CAF50"
                            CornerRadius="2"
                            VerticalAlignment="Bottom"
                            Margin="6,0,6,0"
                            Opacity="0"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <!-- hover -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="HeaderRoot" Property="Background" Value="#F5F5F5"/>
                        </Trigger>

                        <!-- selected -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="HeaderRoot" Property="Background" Value="White"/>
                            <Setter TargetName="HeaderRoot" Property="BorderBrush" Value="#E0E0E0"/>
                            <Setter TargetName="HeaderRoot" Property="BorderThickness" Value="1"/>
                            <Setter TargetName="Indicator" Property="Opacity" Value="1"/>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Foreground" Value="#111"/>
                        </Trigger>

                        <!-- disabled -->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#9E9E9E"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Modern GroupBox: header on top, rounded content card -->
    <Style x:Key="ModernGroupBox" TargetType="GroupBox">
        <Setter Property="Foreground" Value="#212121"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Margin" Value="8,6,8,8"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <!-- header -->
                            <RowDefinition Height="*"/>
                            <!-- content -->
                        </Grid.RowDefinitions>

                        <!-- Header pill -->
                        <Border x:Name="HeaderBox"
                            Grid.Row="0"
                            Margin="2,0,2,6"
                            Background="White"
                            BorderBrush="#4CAF50"
                            BorderThickness="1"
                            CornerRadius="6">
                            <ContentPresenter x:Name="HeaderPresenter"
                                          ContentSource="Header"
                                          Margin="10,4"
                                          RecognizesAccessKey="True"
                                          VerticalAlignment="Center"/>
                        </Border>

                        <!-- Content card -->
                        <Border x:Name="Card"
                            Grid.Row="1"
                            Background="White"
                            BorderBrush="#E0E0E0"
                            BorderThickness="1"
                            CornerRadius="8"
                            Padding="16">
                            <ContentPresenter/>
                        </Border>
                    </Grid>

                    <!-- Disabled look -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="HeaderBox" Property="Opacity" Value="0.6"/>
                            <Setter TargetName="Card" Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    




</ResourceDictionary>
